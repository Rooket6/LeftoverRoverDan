// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2813.LeftoverRoverDan;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.VictorSP;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController elevatorSpeedControllerLeft;
    public static SpeedController elevatorSpeedControllerRight;
    public static RobotDrive elevatorSpeedControllers;
    public static Encoder elevatorEncoder;
    public static SpeedController shooterSpeedController;
    public static Encoder shooterEncoder;
    public static SpeedController intakeSpeedControllerLeft;
    public static SpeedController intakeSpeedControllerRight;
    public static SpeedController driveTrainSpeedControllerFrontLeft;
    public static SpeedController driveTrainSpeedControllerFrontRight;
    public static SpeedController driveTrainSpeedControllerBackLeft;
    public static SpeedController driveTrainSpeedControllerBackRight;
    public static RobotDrive driveTrainSpeedControllers;
    public static AnalogGyro driveTrainGyro;
    public static AnalogPotentiometer armsPotentiometer;
    public static SpeedController armsSpeedControllerLeft;
    public static SpeedController armsSpeedControllerRight;
    public static RobotDrive armsSpeedControllers;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elevatorSpeedControllerLeft = new VictorSP(1);
        LiveWindow.addActuator("Elevator", "SpeedControllerLeft", (VictorSP) elevatorSpeedControllerLeft);
        
        elevatorSpeedControllerRight = new VictorSP(2);
        LiveWindow.addActuator("Elevator", "SpeedControllerRight", (VictorSP) elevatorSpeedControllerRight);
        
        elevatorSpeedControllers = new RobotDrive(elevatorSpeedControllerLeft, elevatorSpeedControllerRight);
        
        elevatorSpeedControllers.setSafetyEnabled(true);
        elevatorSpeedControllers.setExpiration(0.1);
        elevatorSpeedControllers.setSensitivity(0.5);
        elevatorSpeedControllers.setMaxOutput(1.0);

        elevatorEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "Encoder", elevatorEncoder);
        elevatorEncoder.setDistancePerPulse(1.0);
        elevatorEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterSpeedController = new VictorSP(0);
        LiveWindow.addActuator("Shooter", "SpeedController", (VictorSP) shooterSpeedController);
        
        shooterEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Encoder", shooterEncoder);
        shooterEncoder.setDistancePerPulse(1.0);
        shooterEncoder.setPIDSourceType(PIDSourceType.kRate);
        intakeSpeedControllerLeft = new VictorSP(7);
        LiveWindow.addActuator("Intake", "SpeedControllerLeft", (VictorSP) intakeSpeedControllerLeft);
        
        intakeSpeedControllerRight = new VictorSP(8);
        LiveWindow.addActuator("Intake", "SpeedControllerRight", (VictorSP) intakeSpeedControllerRight);
        
        driveTrainSpeedControllerFrontLeft = new VictorSP(3);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerFrontLeft", (VictorSP) driveTrainSpeedControllerFrontLeft);
        
        driveTrainSpeedControllerFrontRight = new VictorSP(4);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerFrontRight", (VictorSP) driveTrainSpeedControllerFrontRight);
        
        driveTrainSpeedControllerBackLeft = new VictorSP(5);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerBackLeft", (VictorSP) driveTrainSpeedControllerBackLeft);
        
        driveTrainSpeedControllerBackRight = new VictorSP(6);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerBackRight", (VictorSP) driveTrainSpeedControllerBackRight);
        
        driveTrainSpeedControllers = new RobotDrive(driveTrainSpeedControllerFrontLeft, driveTrainSpeedControllerFrontRight,
              driveTrainSpeedControllerBackLeft, driveTrainSpeedControllerBackRight);
        
        driveTrainSpeedControllers.setSafetyEnabled(true);
        driveTrainSpeedControllers.setExpiration(0.1);
        driveTrainSpeedControllers.setSensitivity(0.5);
        driveTrainSpeedControllers.setMaxOutput(1.0);

        driveTrainGyro = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(0.007);
        armsPotentiometer = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Arms", "Potentiometer", armsPotentiometer);
        
        armsSpeedControllerLeft = new Talon(9);
        LiveWindow.addActuator("Arms", "SpeedControllerLeft", (Talon) armsSpeedControllerLeft);
        
        armsSpeedControllerRight = new Talon(10);
        LiveWindow.addActuator("Arms", "SpeedControllerRight", (Talon) armsSpeedControllerRight);
        
        armsSpeedControllers = new RobotDrive(armsSpeedControllerLeft, armsSpeedControllerRight);
        
        armsSpeedControllers.setSafetyEnabled(true);
        armsSpeedControllers.setExpiration(0.1);
        armsSpeedControllers.setSensitivity(0.5);
        armsSpeedControllers.setMaxOutput(1.0);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
